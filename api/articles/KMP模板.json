{"title":"KMP模板","uid":"57210e696457a5dab93391574b39f7ca","slug":"KMP模板","date":"2022-04-17T04:43:16.000Z","updated":"2022-04-17T06:03:01.577Z","comments":true,"path":"api/articles/KMP模板.json","keywords":null,"cover":[],"content":"<h1 id=\"KMP模板\"><a href=\"#KMP模板\" class=\"headerlink\" title=\"KMP模板\"></a>KMP模板</h1><p><strong>代码如下~</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int KMP(string T, string P)\n&#123;\n    int m &#x3D; P.size();\n    int n &#x3D; T.size();\n    &#x2F;&#x2F;P表示匹配串，长度为 m，T表示原串，长度为n。\n    &#x2F;&#x2F;KMP算法是在T中查找子串P，如果存在，返回这个子串的起始索引，否则返回 -1\n    T &#x3D; &quot; &quot; + T;\n    P &#x3D; &quot; &quot; + P;\n    &#x2F;&#x2F;建立哨兵，使得j从0开始\n    if(m &#x3D;&#x3D; 0)return 0;\n    &#x2F;&#x2F;base case\n    vector&lt;int&gt; next(m + 1, 0);\n    &#x2F;&#x2F;nexti表示在P中，前i个字符组成的子串的最长相同前后缀\n    int i &#x3D; 2, j &#x3D; 0;\n    while(i &lt;&#x3D; m)\n    &#123;\n       while(j &gt; 0 &amp;&amp; P[i] !&#x3D; P[j + 1])\n           j &#x3D; next[j];\n       if(P[i] &#x3D;&#x3D; P[j + 1])\n           j++;\n \t   next[i] &#x3D; j;\n       i++;\n    &#125;\n    &#x2F;&#x2F;dp求解next\n    i &#x3D; 1, j &#x3D; 0;\n    while(i &lt;&#x3D; n)\n    &#123;\n       while(j &gt; 0 &amp;&amp; P[j + 1] !&#x3D; T[i])\n           j &#x3D; next[j];\n       if(P[j + 1] &#x3D;&#x3D; T[i])\n           j++;\n       if(j &#x3D;&#x3D; m)return i - m;\n       i++;\n    &#125;\n    return -1;\n&#125; </code></pre>\n\n<hr>\n<p><strong>解析如下：</strong></p>\n<h3 id=\"1-匹配过程\"><a href=\"#1-匹配过程\" class=\"headerlink\" title=\"1.匹配过程\"></a>1.匹配过程</h3><p>首先在「原串」和「匹配串」分别各自有一个指针指向当前匹配的位置。</p>\n<p>首次匹配的「发起点」是第一个字符 a。显然，后面的 <code>ABCE</code> 都是匹配的，两个指针会同时往右移动。</p>\n<p>在都能匹配上 ABC 的部分，「朴素匹配」和「<code>KMP</code>」并无不同。</p>\n<p>直到出现第一个不同的位置（红标）：</p>\n<p><img src=\"F:\\Blog\\source\\Picture\\KMP1.gif\"></p>\n<p><strong>首先匹配串会检查之前已经匹配成功的部分中里是否存在相同的「前缀」和「后缀」。如果存在，则跳转到「前缀」的下一个位置继续往下匹配：</strong></p>\n<p><img src=\"/KMP2.gif\"></p>\n<p>因为__进行下次模式匹配时，没有必要让串 B 中的 <code>A</code> 与主串中的字符 <code>B</code> 和 <code>C</code> 一一匹配__（<em>它们绝不可能相同_），而是__直接去匹配失败位置处的字符<code>A</code></em>_ .</p>\n<p>到这里，你应该清楚 <code>KMP </code>为什么相比于朴素解法更快：</p>\n<p>  *因为<code> KMP</code> __利用已匹配部分中相同的「前缀」和「后缀」__来__加速下一次的匹配__。</p>\n<p>  *因为 <code>KMP</code> 的原串指针__不会进行回溯__。</p>\n<p>第一点很直观，也很好理解。</p>\n<p>我们可以把重点放在第二点上，原串__不回溯__至「发起点」意味着什么？</p>\n<p>其实是意味着：随着匹配过程的进行，原串指针的_不断右移_，我们本质上是在不断地在__否决一些「不可能」的方案。__</p>\n<p>当我们的原串指针从<code>i</code>位置后移到<code>j</code>位置，不仅仅代表着「原串」下标范围为<code> [i,j)[i,j)</code>的字符与「匹配串」匹配或者不匹配，更是在_否决那些以「原串」下标范围为<code>[i,j)[i,j)</code>为「匹配发起点」的子集。_</p>\n<h3 id=\"2-next数组的构建\"><a href=\"#2-next数组的构建\" class=\"headerlink\" title=\"2.next数组的构建\"></a>2.<code>next</code>数组的构建</h3><p><img src=\"/Next1.png\"></p>\n<p><img src=\"/Next2.png\"></p>\n<p><img src=\"/Next3.png\"></p>\n<p><img src=\"/Next4.png\"></p>\n<h3 id=\"4-代码实现\"><a href=\"#4-代码实现\" class=\"headerlink\" title=\"4.代码实现\"></a>4.代码实现</h3><p>在实际编码时，通常会__往原串和匹配串头部追加一个空格__（哨兵）。</p>\n<p>目的是让<code>j</code>下标从<code> 0</code> 开始，省去 <code>j</code> 从 <code>-1</code> 开始的麻烦。</p>\n<p>整个过程与上述分析完全一致，一些相关的注释我已经写到代码里。</p>\n<hr>\n<p><strong>The End!</strong></p>\n","feature":true,"text":"KMP模板代码如下~ int KMP(string T, string P) &#123; int m &#x3D; P.size(); int n &#x3D; T.size(); &#x2F;&#x2F;P表示匹配串，长度为 m，T表示原串，长度为n。 &#x2F;&#x2F...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Code","slug":"Code","count":4,"path":"api/tags/Code.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#KMP%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">KMP模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8C%B9%E9%85%8D%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">1.匹配过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-next%E6%95%B0%E7%BB%84%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">2.next数组的构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4.代码实现</span></a></li></ol></li></ol></li></ol>","author":{"name":"YingHN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"这也是璀璨星辰","uid":"d9abf5541294ba45cebca6edf6c2825e","slug":"这也是璀璨星辰","date":"2022-04-17T10:53:17.000Z","updated":"2022-04-17T11:05:22.739Z","comments":true,"path":"api/articles/这也是璀璨星辰.json","keywords":null,"cover":null,"text":"这也是璀璨星辰​ 早上5点，天才蒙蒙亮，天空是灰色的，有还缀着一颗星。我还在睡梦中，就被人连挺带喊叫醒了。 ​ 我迷迷糊糊只听到叫我收拾东西的声音，我也没力气管发生了什么，正拿起我的书包，耳中又挤进几个字词。一听到。我全身都震动起来，一下子就全醒了，“婺城区”，“封城”，“逃离“...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Literature","slug":"Literature","count":1,"path":"api/tags/Literature.json"}],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"完全背包模板","uid":"06a4ad3b5747ac0ceb428e9bf158468a","slug":"完全背包模板","date":"2022-04-16T10:48:48.000Z","updated":"2022-04-16T10:56:32.584Z","comments":true,"path":"api/articles/完全背包模板.json","keywords":null,"cover":null,"text":"完全背包模板 代码如下 #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; int main() &#123; int V, n; cin&gt;&gt;V&gt;&gt;n; int v[n + 1], w[n + 1...","link":"","photos":[],"count_time":{"symbolsCount":652,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Code","slug":"Code","count":4,"path":"api/tags/Code.json"}],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}