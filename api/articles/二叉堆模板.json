{"title":"二叉堆模板","uid":"fdb3deac27eca391f3bea9b5599f90c4","slug":"二叉堆模板","date":"2023-02-11T11:51:32.000Z","updated":"2023-02-11T11:52:00.327Z","comments":true,"path":"api/articles/二叉堆模板.json","keywords":null,"cover":null,"content":"<h1 id=\"二叉堆模板\">二叉堆模板</h1>\r\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nclass Heap\n// the biggest one is at the top of the heap\n{\npublic:\n  vector&lt;int&gt; heap;\n  void Up(signed index)\n  // O(k) (k is the deepth of the node#index)\n  {\n    for (signed i = index; i &gt; 0 &amp;&amp; heap[i &gt;&gt; 1] &lt; heap[i]; i &gt;&gt;= 1)\n      swap(heap[i &gt;&gt; 1], heap[i]);\n  }\n  void Down(signed index)\n  // O((\\log n) - k)\n  {\n\n    for (signed i = index, son = i &lt;&lt; 1, n = heap.size(); son &lt; n; i = son, son = i * 2)\n    {\n      if (son + 1 &lt; n &amp;&amp; heap[son] &lt; heap[son + 1])\n        ++son;\n      if (heap[son] &lt;= heap[i])\n        break;\n      swap(heap[son], heap[i]);\n    }\n  }\n  Heap(vector&lt;int&gt; &amp;vec)\n  // O(n)\n  {\n    heap = vec;\n    for (int i = (heap.size() &gt;&gt; 1); i &gt;= 0; --i)\n      Down(i);\n  }\n  int GetTop()\n  // O(1)\n  {\n    return heap[0];\n  }\n  void Insert(int a)\n  // O(\\log n)\n  {\n    heap.push_back(a);\n    Up(heap.size() - 1);\n  }\n  void Deleteintop()\n  // O(\\log n)\n  {\n    swap(heap[0], heap[heap.size() - 1]);\n    heap.pop_back();\n    Down(0);\n  }\n};\n\nint main()\n{\n  vector&lt;int&gt; vec;\n  int n;\n  cin &gt;&gt; n;\n  for (int i = 0; i &lt; n; ++i)\n  {\n    int t;\n    cin &gt;&gt; t;\n    vec.push_back(t);\n  }\n  Heap heap(vec);\n  /*\n  building heap in this way is in O(n)\n  if you use Insert() when inputting,\n  it'll be O(n\\log n)\n  */\n\n  /*do something here*/\n}</code></pre>\r\n","text":"二叉堆模板 #include &lt;bits/stdc++.h&gt; using namespace std; class Heap // the biggest one is at the top of the heap { public: vector&lt;int&gt...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E5%A0%86%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">二叉堆模板</span></a></li></ol>","author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"AcWing-93-B","uid":"5a49e54b325bcc9beaccbd3ef089b665","slug":"AcWing-93-B","date":"2023-03-04T14:23:04.000Z","updated":"2023-03-04T14:27:12.228Z","comments":true,"path":"api/articles/AcWing-93-B.json","keywords":null,"cover":null,"text":"C++DFS+剪枝 简单DFS+剪枝, (目前来说)剪枝逃不开以下几种情况: 1. 无效性剪枝: 对 0 or 1 不操作. 2. 最优性剪枝: 当深度已经超过之前的最优答案, 不必操作. 但是这样还是不能过. 启发式剪枝: 用\"启发式评估函数\"否定非最优解. 即, 当\"当前代价...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OI刷题之道","uid":"5d67ee9613450b17e879008db1b1a32d","slug":"OI刷题之道","date":"2023-01-31T12:23:57.000Z","updated":"2023-01-31T12:30:38.962Z","comments":true,"path":"api/articles/OI刷题之道.json","keywords":null,"cover":null,"text":"切题四件套 我个人认为也可以叫解题四大法则: 理解题目(Clarification) 在 LeetCode 看题后, 先思考, 认真确认和理解题目; 避免忽略了一些条件或者是误解题目; 面试的时候更加应该跟面试官确认清楚题目, 条件, 场景等; 多种解题方案(Possible s...","link":"","photos":[],"count_time":{"symbolsCount":715,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Code","slug":"Code","count":8,"path":"api/tags/Code.json"}],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}