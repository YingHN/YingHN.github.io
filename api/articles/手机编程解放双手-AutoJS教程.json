{"title":"手机编程解放双手-AutoJS教程","uid":"79043696e87fab8b1cf3ed8f65a300ff","slug":"手机编程解放双手-AutoJS教程","date":"2023-01-19T00:43:24.000Z","updated":"2023-01-19T11:26:56.103Z","comments":true,"path":"api/articles/手机编程解放双手-AutoJS教程.json","keywords":null,"cover":[],"content":"<h1 id=\"手机编程解放双手-autojs教程\">手机编程解放双手-AutoJS教程</h1>\r\n<p><code>Auto.js</code>是一个<code>JavaScript</code>的扩展,\r\n能实现无root操作手机.</p>\r\n<h2 id=\"快速开始\">快速开始</h2>\r\n<ol type=\"1\">\r\n<li>下载手机app;\r\n<ol type=\"1\">\r\n<li><a href=\"../Files/autojs软件.apk\">破解版软件4.1.0</a>(<strong>不要点更新</strong>),<br>\r\n<a href=\"../Files/autojs打包.apk\">破解版打包器</a>(视需求下载);</li>\r\n<li><a href=\"https://pro.autojs.org/\">付费版官网(PRO)</a>;</li>\r\n</ol></li>\r\n<li>给权限;</li>\r\n<li>下载VSCode扩展<code>Auto.js-Pro-Ext``Auto.js-VSCodeExt``Auto.js-VSCodeExt-Fixed</code>;</li>\r\n<li>点击手机系统版本号直至打开开发者模式, 然后打开坐标显示;</li>\r\n</ol>\r\n<blockquote>\r\n<p>这个破解版好像有点bug, 手机运行脚本有几率出错,\r\n连接电脑远程运行就没有这个bug.</p>\r\n</blockquote>\r\n<h2 id=\"代码语法\">代码语法</h2>\r\n<p><code>JavaScript</code>语法不再赘述.</p>\r\n<h2 id=\"常见函数\">常见函数</h2>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 52%\">\r\n<col style=\"width: 47%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>函数</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>sleep(t)</td>\r\n<td>脚本休眠t(ms)时间</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>click(x,y)</td>\r\n<td>点击屏幕上点(x,y)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>back()</td>\r\n<td>模拟手机返回键</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>longClick(x,y)</td>\r\n<td>长按点(x,y)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>launchApp(str)</td>\r\n<td>启动名为str的App</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>筛选函数</td>\r\n<td>返回屏幕上符合筛选条件的控件</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>toast(str)</td>\r\n<td>发送气泡消息内容为str</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>log(str)</td>\r\n<td>输出内容为str的日志</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>toastLog(str)</td>\r\n<td>等于toast(str),log(str);</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>gesture(duration, [x1, y1], [x2, y2])</td>\r\n<td>用duration的时间, 从(x1,y1)点滑到(x2,y2)点</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>requestScreenCapture()</td>\r\n<td>申请截图权限</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>captureScreen()</td>\r\n<td>返回截屏的图片</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"控件操作函数\">控件操作函数</h3>\r\n<ul>\r\n<li><code>click()</code> 点击. 点击一个控件,\r\n前提是这个控件的clickable属性为true</li>\r\n<li><code>longClick()</code> 长按. 长按一个控件,\r\n前提是这个控件的longClickable属性为true</li>\r\n<li><code>setText()</code> 设置文本, 用于编辑框控件设置文本.</li>\r\n<li><code>scrollForward()</code>, <code>scrollBackward()</code> 滑动.\r\n滑动一个控件(列表等), 前提是这个控件的scrollable属性为true</li>\r\n<li><code>exits()</code> 判断控件是否存在</li>\r\n<li><code>waitFor()</code> 等待控件出现</li>\r\n</ul>\r\n<h3 id=\"控件属性\">控件属性</h3>\r\n<ul>\r\n<li><code>className</code> 类名. 类名表示一个控件的类型,\r\n例如文本控件为\"android.widget.TextView\",\r\n图片控件为\"android.widget.ImageView\"等.</li>\r\n<li><code>packageName</code> 包名. 包名表示控件所在的应用包名,\r\n例如QQ界面的控件的包名为\"com.tencent.mobileqq\".</li>\r\n<li><code>bounds</code> 控件在屏幕上的范围.</li>\r\n<li><code>drawingOrder</code> 控件在父控件的绘制顺序.</li>\r\n<li><code>indexInParent</code> 控件在父控件的位置.</li>\r\n<li><code>clickable</code> 控件是否可点击.</li>\r\n<li><code>longClickable</code> 控件是否可长按.</li>\r\n<li><code>checkable</code> 控件是否可勾选.</li>\r\n<li><code>checked</code> 控件是否可已勾选.</li>\r\n<li><code>scrollable</code> 控件是否可滑动.</li>\r\n<li><code>selected</code> 控件是否已选择.</li>\r\n<li><code>editable</code> 控件是否可编辑.</li>\r\n<li><code>visibleToUser</code> 控件是否可见.</li>\r\n<li><code>enabled</code> 控件是否已启用.</li>\r\n<li><code>depth</code> 控件的布局深度.</li>\r\n</ul>\r\n<h3 id=\"筛选函数\">筛选函数</h3>\r\n<p>点击Auto.js悬浮窗, 选择蓝色按钮, 点击布局范围分析, 选择控件,\r\n查看控件信息;</p>\r\n<h4 id=\"链式筛选\">链式筛选</h4>\r\n<p>有时一次筛选不能唯一, 用链式调用增加筛选条件.</p>\r\n<p>如下例, 筛选条件是:\r\n<strong>id为\"name\"且类名为\"ImageView\"且深度为10</strong>.</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">id(\"name\").className(\"ImageView\").depth(10).findOne().click()</code></pre>\r\n<h4 id=\"一些函数\">一些函数</h4>\r\n<h5 id=\"uiselectorfindone\">UiSelector.findOne()</h5>\r\n<p>返回 UiObject</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索,\r\n直到屏幕上出现满足条件的一个控件为止, 并返回该控件. 如果找不到控件,\r\n当屏幕内容发生变化时会重新寻找, 直至找到.</p>\r\n<p>需要注意的是, 如果屏幕上一直没有出现所描述的控件, 则该函数会阻塞,\r\n直至所描述的控件出现为止. 因此此函数不会返回null.</p>\r\n<p>另外, 如果屏幕上有多个满足条件的控件, findOne()采用深度优先搜索(DFS),\r\n会返回该搜索算法找到的第一个控件. 注意控件找到的顺序有时会起到作用.</p>\r\n<h5 id=\"uiselectorfindonetimeout\">UiSelector.findOne(timeout)</h5>\r\n<p>timeout {number} 搜索的超时时间, 单位毫秒</p>\r\n<p>返回 UiObject</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索,\r\n直到屏幕上出现满足条件的一个控件为止,\r\n并返回该控件；如果在timeout毫秒的时间内没有找到符合条件的控件,\r\n则终止搜索并返回null.</p>\r\n<p>该函数类似于不加参数的findOne(), 只不过加上了时间限制. 示例：</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//启动Auto.js\nlaunchApp(\"Auto.js\");\n//在6秒内找出日志图标的控件\nvar w = id(\"action_log\").findOne(6000);\n//如果找到控件则点击\nif(w != null){\n    w.click();\n}else{\n    //否则提示没有找到\n    toast(\"没有找到日志图标\");\n}</code></pre>\r\n<h5 id=\"uiselectorfindonce\">UiSelector.findOnce()</h5>\r\n<p>返回 UiObject</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索,\r\n如果找到符合条件的控件则返回该控件；否则返回null.</p>\r\n<h5 id=\"uiselectorfindoncei\">UiSelector.findOnce(i)</h5>\r\n<p>i {number} 索引</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索, 并返回第 i\r\n+ 1 个符合条件的控件；如果没有找到符合条件的控件, 或者符合条件的控件个数\r\n&lt; i, 则返回null.</p>\r\n<p>注意这里的控件次序, 是搜索算法深度优先搜索(DSF)决定的.</p>\r\n<h5 id=\"uiselectorfind\">UiSelector.find()</h5>\r\n<p>返回 UiCollection</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索,\r\n找到所有满足条件的控件集合并返回. 这个搜索只进行一次,\r\n并不保证一定会找到, 因而会出现返回的控件集合为空的情况.</p>\r\n<p>不同于findOne()或者findOnce()只找到一个控件并返回一个控件,\r\nfind()函数会找出所有满足条件的控件并返回一个控件集合.\r\n之后可以对控件集合进行操作.</p>\r\n<p>可以通过empty()函数判断找到的是否为空. 例如：</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var c = className(\"AbsListView\").find();\nif(c.empty()){\n    toast(\"找到啦\");\n}else{\n    toast(\"没找到╭(╯^╰)╮\");\n}</code></pre>\r\n<h5 id=\"uiselectoruntilfind\">UiSelector.untilFind()</h5>\r\n<p>返回 UiCollection</p>\r\n<p>根据当前的选择器所确定的筛选条件, 对屏幕上的控件进行搜索,\r\n直到找到至少一个满足条件的控件为止, 并返回所有满足条件的控件集合.</p>\r\n<p>该函数与find()函数的区别在于, 该函数永远不会返回空集合；但是,\r\n如果屏幕上一直没有出现满足条件的控件, 则该函数会保持阻塞.</p>\r\n<h5 id=\"uiselectorexists\">UiSelector.exists()</h5>\r\n<p>返回 {Boolean}</p>\r\n<p>判断屏幕上是否存在控件符合选择器所确定的条件.\r\n例如要判断某个文本出现就执行某个动作, 可以用：</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(text(\"某个文本\").exists()){\n    //要支持的动作\n}\n\nUiSelector.waitFor()</code></pre>\r\n<p>等待屏幕上出现符合条件的控件；在满足该条件的控件出现之前,\r\n该函数会一直保持阻塞.</p>\r\n<p>例如要等待包含\"哈哈哈\"的文本控件出现的代码为：</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">textContains(\"哈哈哈\").waitFor();</code></pre>\r\n<h2 id=\"进阶教程\">进阶教程</h2>\r\n<h3 id=\"连接电脑\">连接电脑</h3>\r\n<p><code>Ctrl+Shift+P</code>输入<code>Auto.js: start server</code>,\r\n右下角会弹出IP, 然后在手机\"连接电脑\"选项中输入这个IP(不需要输入端口),\r\n连接即可. (手机和电脑须在同一局域网下)</p>\r\n<p><img src=\"../Pic/Auto.js教程/IP.png\"></p>\r\n<p>然后可以在电脑写代码,\r\n远程运行<code>Auto.js: run on device</code>.</p>\r\n<h3 id=\"打包脚本\">打包脚本</h3>\r\n<ol type=\"1\">\r\n<li>右下角+号, 新建文件夹命名为应用名;</li>\r\n<li>在文件夹中加载对应脚本;</li>\r\n<li>点击三个点, 打包应用;</li>\r\n<li>按照指引操作即可.</li>\r\n</ol>\r\n<hr>\r\n<h2 id=\"参考文献\">参考文献</h2>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/90065914\">《Auto.js快速入门实战教程》</a><br>\r\n<a href=\"https://hyb1996.github.io/AutoJs-Docs/\">Auto.js官方文档</a></p>\r\n","text":"手机编程解放双手-AutoJS教程 Auto.js是一个JavaScript的扩展, 能实现无root操作手机. 快速开始 下载手机app; 破解版软件4.1.0(不要点更新), 破解版打包器(视需求下载); 付费版官网(PRO); 给权限; 下载VSCode扩展Auto.js-...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%8B%E6%9C%BA%E7%BC%96%E7%A8%8B%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B-autojs%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">手机编程解放双手-AutoJS教程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">快速开始</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">代码语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常见函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">控件操作函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E4%BB%B6%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">控件属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%9B%E9%80%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">筛选函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%93%BE%E5%BC%8F%E7%AD%9B%E9%80%89\"><span class=\"toc-text\">链式筛选</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">一些函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorfindone\"><span class=\"toc-text\">UiSelector.findOne()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorfindonetimeout\"><span class=\"toc-text\">UiSelector.findOne(timeout)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorfindonce\"><span class=\"toc-text\">UiSelector.findOnce()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorfindoncei\"><span class=\"toc-text\">UiSelector.findOnce(i)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorfind\"><span class=\"toc-text\">UiSelector.find()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectoruntilfind\"><span class=\"toc-text\">UiSelector.untilFind()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#uiselectorexists\"><span class=\"toc-text\">UiSelector.exists()</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">进阶教程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91\"><span class=\"toc-text\">连接电脑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">打包脚本</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol></li></ol>","author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OI刷题之道","uid":"5d67ee9613450b17e879008db1b1a32d","slug":"OI刷题之道","date":"2023-01-31T12:23:57.000Z","updated":"2023-01-31T12:30:38.962Z","comments":true,"path":"api/articles/OI刷题之道.json","keywords":null,"cover":null,"text":"切题四件套 我个人认为也可以叫解题四大法则: 理解题目(Clarification) 在 LeetCode 看题后, 先思考, 认真确认和理解题目; 避免忽略了一些条件或者是误解题目; 面试的时候更加应该跟面试官确认清楚题目, 条件, 场景等; 多种解题方案(Possible s...","link":"","photos":[],"count_time":{"symbolsCount":715,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Code","slug":"Code","count":8,"path":"api/tags/Code.json"}],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cpp转JS急救","uid":"94d0eeeec6ca3884d15a513463e28bff","slug":"cpp转JS急救","date":"2023-01-18T10:19:02.000Z","updated":"2023-01-19T11:59:04.970Z","comments":true,"path":"api/articles/cpp转JS急救.json","keywords":null,"cover":null,"text":"cpp转JS急救 本文仅讲述语法区别, 不探讨底层, 且作者才疏学浅, 难免纰漏. cpp. JS. auto(声明变量) var auto(声明函数) function const auto const 语句; \";\"可有可无 数组={0} 数组=[0] #include 没有...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Code","slug":"Code","count":8,"path":"api/tags/Code.json"}],"author":{"name":"YingHN","slug":"blog-author","avatar":"https://s2.loli.net/2022/12/24/vS8KdpjE9WVInX2.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}